name: Produce metrics
outputs:
- {name: mlpipeline_metrics, type: Metrics}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def produce_metrics(
          mlpipeline_metrics_path
      ):
          accuracy = random.random()
          precision = random.random()
          recall = random.random()

          metrics = {
              "metrics": [
                  {"name": "accuracy-score", "numberValue": accuracy, "format": "PERCENTAGE"},
                  {"name": "precision-score", "numberValue": precision, "format": "PERCENTAGE"},
                  {"name": "recall-score", "numberValue": recall, "format": "PERCENTAGE"},
              ]
          }

          #return [json.dumps(metrics)]
          with open(mlpipeline_metrics_path, "w") as f:
              json.dump(metrics, f)

      import argparse
      _parser = argparse.ArgumentParser(prog='Produce metrics', description='')
      _parser.add_argument("--mlpipeline-metrics", dest="mlpipeline_metrics_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = produce_metrics(**_parsed_args)
    args:
    - --mlpipeline-metrics
    - {outputPath: mlpipeline_metrics}
